{
	"info": {
		"_postman_id": "db5b4ced-2f89-4b25-9142-e7705607cbc7",
		"name": "danskill - nestjs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"login\", function () {",
									"    if (responseCode.code === 201)",
									"    {",
									"        const data = pm.response.json();",
									"        pm.environment.set(\"access_token_nest\", data.access_token);",
									"    }",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"ohad2121@gmail.com\",\n\t\"password\": \"check\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Sign up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add user (sign up)\", function () {",
									"    if (responseCode.code === 201)",
									"    {",
									"        const user = pm.response.json();",
									"        pm.environment.set(\"userId\", user._id);",
									"        pm.environment.set(\"username\", user.username);",
									"    }",
									"    ",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ohad2121@gmail.com\",\n    \"password\": \"check\",\n    \"username\": \"ohad2121\",\n    \"given_name\": \"ohad\",\n    \"family_name\": \"ohad\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get user\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/single/{{username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"single",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all stars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all stars\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/all/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"all",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all coaches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all coaches\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/all/coach",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"all",
								"coach"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Figures",
			"item": [
				{
					"name": "ðŸ”‘  Add figure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add figure\", function () {",
									"    if (responseCode.code === 201)",
									"    {",
									"        const figure = pm.response.json();",
									"        pm.environment.set(\"figureId\", figure._id);",
									"    }",
									"    ",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"stars\": [\"{{userId}}\"],\n\t\"name\": \"figure 1\",\n\t\"type\": \"samba\",\n\t\"level\": \"advanced\",\n\t\"logo\": \"stars/benedetto_ferruggia/dance.JPG\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/figures",
							"host": [
								"{{url}}"
							],
							"path": [
								"figures"
							]
						}
					},
					"response": []
				},
				{
					"name": "ðŸ”‘ Delete figure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete figure\", function () {",
									"    if (responseCode.code === 200)",
									"    {",
									"        const figure = pm.response.json();",
									"        pm.environment.unset(\"figureId\");",
									"    }",
									"    ",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/figures/{{figureId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"figures",
								"{{figureId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get figure by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get figure by id\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/figures/single/{{figureId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"figures",
								"single",
								"{{figureId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all figures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all figures\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/figures/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"figures",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all star figures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all star figures\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/figures/all?starUsername={{username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"figures",
								"all"
							],
							"query": [
								{
									"key": "starUsername",
									"value": "{{username}}"
								}
							]
						},
						"description": "Currently, it is possible to filter only by star username but additional parameters will be added soon"
					},
					"response": []
				}
			]
		},
		{
			"name": "FIgure Videos",
			"item": [
				{
					"name": "ðŸ”‘  Add figure video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add figure video\", function () {",
									"    if (responseCode.code === 201)",
									"    {",
									"        const figureVideo = pm.response.json();",
									"        pm.environment.set(\"figureVideoId\", figureVideo._id);",
									"    }",
									"    ",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stars\": [\"{{userId}}\"],\n    \"key\": \"stars/SoulDance/nina/Batuchado.MOV\",\n    \"thumbnail\": \"stars/paul_moldovan/Rumba/opening_out/14570766_531615306963253_7292340220612807962_o.jpg\",\n    \"type\": \"comparable\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/figure-video/{{figureId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"figure-video",
								"{{figureId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ðŸ”‘ Delete figure video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete figure video\", function () {",
									"    if (responseCode.code === 200)",
									"    {",
									"        const figureVideo = pm.response.json();",
									"        pm.environment.unset(\"figureVideoId\");",
									"    }",
									"    ",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/figure-video/{{figureVideoId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"figure-video",
								"{{figureVideoId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Practices",
			"item": [
				{
					"name": "Get practice by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get practice item by id\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/practices/single/{{practiceId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"practices",
								"single",
								"{{practiceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all practices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all practice items\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/practices/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"practices",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get practice by figure id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get practice by figure id\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/practices/all?figureId={{figureId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"practices",
								"all"
							],
							"query": [
								{
									"key": "figureId",
									"value": "{{figureId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add practice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add practice\", function () {\r",
									"    if (responseCode.code === 201)\r",
									"    {\r",
									"        const practice = pm.response.json();\r",
									"        pm.environment.set(\"practiceId\", practice._id);\r",
									"    }\r",
									"    \r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "video",
									"type": "file",
									"src": "/home/ohad/Videos/SampleVideo_1280x720_2mb.mp4"
								}
							]
						},
						"url": {
							"raw": "{{url}}/practices/{{videoId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"practices",
								"{{videoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete practice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete practice\", function () {\r",
									"    if (responseCode.code === 200)\r",
									"    {\r",
									"        const figure = pm.response.json();\r",
									"        pm.environment.unset(\"practiceId\");\r",
									"    }\r",
									"    \r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/practices/single/{{practiceId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"practices",
								"single",
								"{{practiceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notes",
			"item": [
				{
					"name": "Add note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add note\", function () {\r",
									"    if (responseCode.code === 201)\r",
									"    {\r",
									"        const figure = pm.response.json().data;\r",
									"        pm.environment.set(\"noteId\", figure._id);\r",
									"    }\r",
									"    \r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Title #1\",\n    \"content\": \"check\"\n}"
						},
						"url": {
							"raw": "{{url}}/notes/{{practiceId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"notes",
								"{{practiceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete practice item\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/notes/{{noteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token_nest}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}